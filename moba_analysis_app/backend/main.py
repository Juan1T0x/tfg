#!/usr/bin/env python3
"""
Entry-point of the MOBA-Analysis backend.

Launch it with:

    python main.py --reload

The module does four things:

1.  Cleans the temporary *frames/* directory created by the worker.
2.  Builds and configures a :class:`fastapi.FastAPI` application.
3.  Exposes the REST API defined in *api/* and serves every
    image/video asset that the analysis pipeline leaves under
    *matches_history/<match>/results/*.
4.  Starts an **uvicorn** server if the file is executed directly.

The code purposefully keeps all framework-specific wiring in one place
so that the rest of the project can stay framework-agnostic.
"""
from __future__ import annotations

import argparse
from pathlib import Path

import uvicorn
from fastapi import FastAPI, Response
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse
from fastapi.staticfiles import StaticFiles

from api import api_router
from utils.cleanup import cleanup_frames


# ---------------------------------------------------------------------------
# housekeeping – delete stale jpgs left by previous runs
# ---------------------------------------------------------------------------

deleted = cleanup_frames()
print(f"[startup] removed {deleted} old frame(s)")


# ---------------------------------------------------------------------------
# FastAPI application
# ---------------------------------------------------------------------------

app = FastAPI(title="TFG – MOBA Analysis")

# CORS: the Flutter front-end runs on a different origin during development
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# ---------------------------------------------------------------------------
# static assets
# ---------------------------------------------------------------------------

_ASSETS_DIR = Path(__file__).resolve().parent / "assets" / "images"

app.mount("/static/icons",           StaticFiles(directory=_ASSETS_DIR / "icons"),           name="icons")
app.mount("/static/splash_arts",     StaticFiles(directory=_ASSETS_DIR / "splash_arts"),     name="splash_arts")
app.mount("/static/loading_screens", StaticFiles(directory=_ASSETS_DIR / "loading_screens"), name="loading_screens")

# ---------------------------------------------------------------------------
# dynamic assets – visualisations produced by the pipeline
# ---------------------------------------------------------------------------

_MATCHES_DIR = Path(__file__).resolve().parent / "matches_history"


@app.get("/results/{match_slug}/{file_path:path}")
async def serve_result_asset(match_slug: str, file_path: str):
    """
    Return any file generated by the visualisation services.

    Example
    -------
    ``GET /results/test-match/cs_diff/p1_vs_p6/img_001.png``

    will serve::

        matches_history/test-match/results/cs_diff/p1_vs_p6/img_001.png
    """
    full_path = _MATCHES_DIR / match_slug / "results" / file_path
    if not full_path.is_file():
        # Do not leak the real path – simply reply with 404
        return Response(status_code=404)
    return FileResponse(full_path)


# ---------------------------------------------------------------------------
# wire up the REST API
# ---------------------------------------------------------------------------

app.include_router(api_router)

# ---------------------------------------------------------------------------
# command-line entry-point
# ---------------------------------------------------------------------------

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Run the MOBA-Analysis backend.")
    parser.add_argument("--host", default="0.0.0.0", help="interface to bind")
    parser.add_argument("--port", default=8888, type=int, help="TCP port")
    parser.add_argument("--reload", action="store_true",
                        help="enable auto-reload on code changes (development only)")
    args = parser.parse_args()

    uvicorn.run(
        "main:app",
        host=args.host,
        port=args.port,
        reload=args.reload,
        reload_dirs=["."],
    )
