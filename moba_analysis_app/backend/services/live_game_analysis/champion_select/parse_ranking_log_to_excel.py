#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Parse ranking log → Excel
=========================

Takes the plain-text report generated by *template_matcher_with_ranking_scaled.py*
(**results/matching_ranking.log**) and converts it to an Excel workbook
(**results/ranking.xlsx**).

The input lines have this format:

    1. splash_arts | resize_bbox_only | SIFT: 9,9, 165.679

Only the *top-1* accuracy and total time are exported:

+-----------+-------------+----------+------+-----------+
| fuente    | estrategia  | detector | top1 | tiempo(s) |
+-----------+-------------+----------+------+-----------+
| …         | …           | …        | …    | …         |
+-----------+-------------+----------+------+-----------+
"""

from __future__ import annotations

import re
from pathlib import Path
from typing import List, Dict, Any

import pandas as pd

# --------------------------------------------------------------------------- #
# Paths & patterns                                                            #
# --------------------------------------------------------------------------- #
LOG_PATH:   Path = Path("results") / "matching_ranking.log"
EXCEL_PATH: Path = Path("results") / "ranking.xlsx"

_LINE_RE = re.compile(
    r"""
    ^\s*\d+\.\s*                     # ranking index
    (?P<source>[^|]+?)\s*\|\s*       # artwork source folder
    (?P<strategy>[^|]+?)\s*\|\s*     # resize strategy
    (?P<detector>[^:]+?)\s*:\s*      # feature detector
    (?P<top1>\d+),\d+,\s*            # top-1 accuracy (top-5 ignored)
    (?P<time>[0-9.]+)                # processing time (s)
    """,
    re.VERBOSE,
)

# --------------------------------------------------------------------------- #
# Helpers                                                                     #
# --------------------------------------------------------------------------- #
def _parse_log(path: Path) -> List[Dict[str, Any]]:
    """
    Parse *matching_ranking.log* and return a list of dicts ready for a
    ``pandas.DataFrame``. Raises ``RuntimeError`` if no valid lines were found.
    """
    records: List[Dict[str, Any]] = []

    with path.open(encoding="utf-8") as fh:
        for line in fh:
            m = _LINE_RE.match(line)
            if not m:
                continue
            records.append(
                {
                    "fuente":     m.group("source").strip(),
                    "estrategia": m.group("strategy").strip(),
                    "detector":   m.group("detector").strip(),
                    "top1":       int(m.group("top1")),
                    "tiempo(s)":  float(m.group("time")),
                }
            )

    if not records:
        raise RuntimeError("matching_ranking.log looks empty or malformed.")
    return records


def _export_excel(records: List[Dict[str, Any]], dest: Path) -> None:
    """Write *records* to *dest* as an Excel workbook."""
    df = pd.DataFrame(records)
    dest.parent.mkdir(parents=True, exist_ok=True)
    df.to_excel(dest, index=False)


# --------------------------------------------------------------------------- #
# Entry-point                                                                 #
# --------------------------------------------------------------------------- #
def main() -> None:
    data = _parse_log(LOG_PATH)
    _export_excel(data, EXCEL_PATH)
    print(f"✔ Ranking exported to {EXCEL_PATH.resolve()}")


if __name__ == "__main__":
    main()
